import { TrainbookInterface } from "../../interfaces/ITrainbook";

const apiUrl = "http://localhost:8080";

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TrainBooks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GetTrainbooks() {
  try {
    const res = await fetch(`${apiUrl}/trainbook`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!res.ok) throw new Error(`Error fetching trainbooks: ${res.status}`);

    return await res.json();
  } catch (error) {
    console.error("‚ùå Error fetching trainbooks:", error);
    return null;
  }
}

// ‚úÖ ‡∏î‡∏∂‡∏á TrainBook ‡∏ï‡∏≤‡∏° ID
export async function GetTrainbookById(id: number) {
  if (!id || isNaN(id) || id <= 0) {
    console.error("‚ùå Invalid Trainbook ID:", id);
    return null;
  }

  try {
    const res = await fetch(`${apiUrl}/trainbook/${id}`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!res.ok) throw new Error(`Error fetching trainbook by ID (${id}): ${res.status}`);

    return await res.json();
  } catch (error) {
    console.error("‚ùå Error fetching trainbook by ID:", error);
    return null;
  }
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TrainBooks ‡∏Ç‡∏≠‡∏á Driver ‡∏ï‡∏≤‡∏° DriverID
export async function GetTrainbooksByDriver(driverID: number, token: string) {
  if (!driverID || isNaN(driverID) || driverID <= 0) {
    console.error("‚ùå Invalid Driver ID:", driverID);
    return null;
  }

  try {
    const res = await fetch(`${apiUrl}/trainbook/${driverID}`, {
      method: "GET",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
    });

    if (!res.ok) throw new Error(`Error fetching trainbooks for driver ${driverID}: ${res.status}`);

    return await res.json();
  } catch (error) {
    console.error("‚ùå Error fetching trainbooks for driver:", error);
    return null;
  }
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á TrainBook ‡πÉ‡∏´‡∏°‡πà
export async function CreateTrainbook(roomId: number, data: TrainbookInterface, token: string) {
  console.log("üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API:", { roomId, data });

  if (!token) {
    console.error("‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    return null;
  }

  if (!roomId || isNaN(roomId) || roomId <= 0) {
    console.error("‚ùå Room ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", roomId);
    return null;
  }

  if (!data.DriverID || isNaN(Number(data.DriverID)) || data.DriverID <= 0) {
    console.error("‚ùå DriverID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤:", data.DriverID);
    return null;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Request Body
  const requestBody = {
    room_id: roomId,
    driver_id: data.DriverID,
    status: data.Status || "Confirmed",
  };

  console.log("üì° JSON ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ API:", JSON.stringify(requestBody, null, 2));

  try {
    const res = await fetch(`${apiUrl}/trainbook`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(requestBody), // ‚úÖ Ensure JSON.stringify is used
    });

    if (!res.ok) {
      const errorData = await res.json();
      throw new Error(`Error creating trainbook: ${res.status} - ${errorData.error}`);
    }

    return await res.json();
  } catch (error) {
    console.error("‚ùå Error creating trainbook:", error);
    return null;
  }
}


// ‚úÖ PATCH (Update) an existing trainbook
export async function UpdateTrainbookById(data: TrainbookInterface, token: string) {
  if (!token) {
    console.error("‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    return null;
  }

  if (!data.ID || isNaN(data.ID) || data.ID <= 0) {
    console.error("‚ùå Missing or Invalid ID for updating trainbook:", data);
    return null;
  }

  try {
    const res = await fetch(`${apiUrl}/trainbook/${data.ID}`, {
      method: "PATCH",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify(data),
    });

    if (!res.ok) throw new Error(`Error updating trainbook with ID (${data.ID}): ${res.status}`);

    return await res.json();
  } catch (error) {
    console.error("‚ùå Error updating trainbook:", error);
    return null;
  }
}

// ‚úÖ DELETE a trainbook by ID
export async function DeleteTrainbookById(id: number, token: string) {
  if (!token) {
    console.error("‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    return null;
  }

  if (!id || isNaN(id) || id <= 0) {
    console.error("‚ùå Invalid Trainbook ID:", id);
    return null;
  }

  try {
    const res = await fetch(`${apiUrl}/trainbook/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
    });

    if (!res.ok) throw new Error(`Error deleting trainbook with ID (${id}): ${res.status}`);

    return true;
  } catch (error) {
    console.error("‚ùå Error deleting trainbook:", error);
    return null;
  }
}

export async function UpdateTrainbookStatus(trainbookId: number, data: { status: string }) {
  const requestOptions = {
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  };

  try {
    const res = await fetch(`${apiUrl}/trainbook/${trainbookId}/status`, requestOptions);
    return await res.json();
  } catch (error) {
    console.error("‚ùå Error updating trainbook status:", error);
    return null;
  }
}
