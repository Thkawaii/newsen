package controller

import (
	"errors"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"project-se/config"
	"project-se/entity"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"sync"
	"github.com/gorilla/websocket"
	"log"
	
)

// CreatePassenger - ‡∏™‡∏£‡πâ‡∏≤‡∏á Passenger ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
func CreatePassenger(c *gin.Context) {
	var passenger entity.Passenger

	// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å form-data
	username := c.PostForm("username")
	firstname := c.PostForm("first_name")
	lastname := c.PostForm("last_name")
	phoneNumber := c.PostForm("phone_number")
	email := c.PostForm("email")
	password := c.PostForm("password")
	genderIDStr := c.PostForm("gender_id") // ‡∏£‡∏±‡∏ö Gender ID

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	if username == "" || firstname == "" || lastname == "" || phoneNumber == "" || email == "" || password == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Required fields are missing"})
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á GenderID ‡πÄ‡∏õ‡πá‡∏ô uint
	genderID, err := strconv.Atoi(genderIDStr)
	if err != nil || genderID <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid gender_id"})
		return
	}

	// ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	file, err := c.FormFile("profile")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid file upload"})
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
	if file.Header.Get("Content-Type") != "image/png" && file.Header.Get("Content-Type") != "image/jpeg" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Only PNG and JPEG files are allowed"})
		return
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Passenger object
	passenger = entity.Passenger{
		UserName:      username,
		FirstName:     firstname,
		LastName:      lastname,
		PhoneNumber:   phoneNumber,
		Email:         email,
		Password:      password,
		GenderID:      uint(genderID),
	}

	// ‡πÉ‡∏ä‡πâ Transaction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	tx := config.DB().Begin()

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger
	if err := tx.Create(&passenger).Error; err != nil {
		tx.Rollback()
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Cannot save passenger"})
		return
	}

	// ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	newFileName := fmt.Sprintf("passenger_id%03d.png", passenger.ID)
	uploadPath := filepath.Join("Images", "Passengers", newFileName)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
	if err := os.MkdirAll(filepath.Dir(uploadPath), os.ModePerm); err != nil {
		tx.Rollback()
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Cannot create directory"})
		return
	}

	// Commit Transaction
	tx.Commit()

	// ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö
	c.JSON(http.StatusCreated, gin.H{
		"message": "Passenger created successfully",
		"data":    passenger,
	})
}

// GetPassengers - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func GetPassengers(c *gin.Context) {
	var passengers []entity.Passenger

	if err := config.DB().Preload("Gender").Find(&passengers).Error; err != nil {
		fmt.Println("Error retrieving passenger:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch passengers"})
		return
	}
	fmt.Println("passenger retrieved successfully:", passengers)
	c.JSON(http.StatusOK, gin.H{"passengers": passengers})
}

// GetPassengerDetail - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
func GetPassengerDetail(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid passenger ID"})
		return
	}

	var passenger entity.Passenger
	if err := config.DB().Preload("Gender").Where("id = ?", id).First(&passenger).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "Passenger not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch passenger details"})
		}
		return
	}

	c.JSON(http.StatusOK, gin.H{"passenger": passenger})
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏° ID
func GetPassengerByID(c *gin.Context) {
    id := c.Param("id") // ‡∏£‡∏±‡∏ö ID ‡∏à‡∏≤‡∏Å URL
    var passenger entity.Passenger

    db := config.DB()

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Role
    if err := db.Preload("Role").Preload("Gender").First(&passenger, id).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "Passenger not found"})
        return
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
    c.JSON(http.StatusOK, gin.H{
        "id":         passenger.ID,
        "username":   passenger.UserName,
        "first_name": passenger.FirstName,
        "last_name":  passenger.LastName,
        "phone":      passenger.PhoneNumber,
        "email":      passenger.Email,
        "role":       passenger.Role, // ‡∏™‡πà‡∏á Role ‡∏ó‡∏±‡πâ‡∏á Object ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πá‡πÑ‡∏î‡πâ
    })
}






// UpdatePassenger - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger
func UpdatePassenger(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid passenger ID"})
		return
	}

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Passenger
	var passenger entity.Passenger
	if err := config.DB().First(&passenger, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Passenger not found"})
		return
	}

	// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å FormData
	if err := c.ShouldBind(&passenger); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input data"})
		return
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
	if err := config.DB().Save(&passenger).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update passenger"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Passenger updated successfully", "data": passenger})
}

// DeletePassenger - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Passenger
func DeletePassenger(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid passenger ID"})
		return
	}

	if err := config.DB().Delete(&entity.Passenger{}, id).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete passenger"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Passenger deleted successfully"})
}


//‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏Ç‡∏≠‡∏á Passenger ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
var passengerConnections = make(map[string]*websocket.Conn)
// ‡πÉ‡∏ä‡πâ Mutex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Map ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
var passengerMutex sync.Mutex

// Upgrade HTTP Request ‡πÄ‡∏õ‡πá‡∏ô WebSocket
var passengerupgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

// ConnectPassengerWebSocket
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏Ç‡∏≠‡∏á Passenger
func ConnectPassengerWebSocket(c *gin.Context) {
	passengerId := c.Param("passengerId")

	conn, err := passengerupgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Println("‚ùå WebSocket upgrade error:", err)
		return
	}
	defer conn.Close()

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Passenger ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	passengerMutex.Lock()
	passengerConnections[passengerId] = conn
	log.Printf("‚úÖ Passenger %s connected via WebSocket", passengerId)
	log.Printf("üõ†Ô∏è Current passenger connections: %+v", passengerConnections)
	passengerMutex.Unlock()

	// ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Passenger
	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Printf("‚ùå Error reading message from passenger %s: %v", passengerId, err)
			passengerMutex.Lock()
			delete(passengerConnections, passengerId)
			log.Printf("üõ†Ô∏è Passenger %s removed from connections", passengerId)
			passengerMutex.Unlock()
			break
		}
		log.Printf("üì© Message from passenger %s: %s", passengerId, msg)
	}

	log.Printf("üîå Passenger %s disconnected", passengerId)
}

// NotifyPassenger - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° driverId ‡πÅ‡∏•‡∏∞ bookingId
// NotifyPassenger - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° driverId, bookingId ‡πÅ‡∏•‡∏∞ roomChatId
func NotifyPassenger(passengerId string, driverId string, bookingId string, roomChatId string, message string) error {
	passengerMutex.Lock()
	defer passengerMutex.Unlock()

	log.Printf("üõ†Ô∏è Checking connection for Passenger ID: %s", passengerId)
	conn, exists := passengerConnections[passengerId]
	if !exists {
		log.Printf("‚ùå Passenger %s is not connected", passengerId)
		return fmt.Errorf("‚ùå Passenger %s is not connected", passengerId)
	}

	// üì¶ JSON Payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket
	payload := fmt.Sprintf(
		`{"type": "notification", "message": "%s", "driverId": "%s", "bookingId": "%s", "roomChatId": "%s"}`,
		message, driverId, bookingId, roomChatId,
	)

	// üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Passenger ‡∏ú‡πà‡∏≤‡∏ô WebSocket
	err := conn.WriteMessage(websocket.TextMessage, []byte(payload))
	if err != nil {
		log.Printf("‚ùå Failed to send message to passenger %s: %v", passengerId, err)
		delete(passengerConnections, passengerId)
		return err
	}

	log.Printf("‚úÖ Notification sent to passenger %s: %s", passengerId, message)
	return nil
}


// NotifyPassengerHandler - ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á Passenger

func NotifyPassengerHandler(c *gin.Context) {
	passengerId := c.Param("passengerId")

	// üìù JSON Payload
	var requestBody struct {
		Message    string `json:"message"`
		DriverId   string `json:"driverId"`
		BookingId  string `json:"bookingId"`
		RoomChatId string `json:"roomChatId"` // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° roomChatId
	}

	// üì• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON Payload
	if err := c.ShouldBindJSON(&requestBody); err != nil {
		log.Println("‚ùå Invalid JSON payload:", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"message": "Invalid JSON payload",
			"error":   err.Error(),
		})
		return
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	if requestBody.DriverId == "" || requestBody.BookingId == "" || requestBody.Message == "" || requestBody.RoomChatId == "" {
		log.Println("‚ùå Missing required fields: driverId, bookingId, message, or roomChatId")
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"message": "Missing required fields: driverId, bookingId, message, or roomChatId",
		})
		return
	}

	log.Printf(
		"üõ†Ô∏è Sending notification to Passenger %s | DriverId: %s | BookingId: %s | RoomChatId: %s | Message: %s\n",
		passengerId, requestBody.DriverId, requestBody.BookingId, requestBody.RoomChatId, requestBody.Message,
	)

	// üöÄ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
	if err := NotifyPassenger(passengerId, requestBody.DriverId, requestBody.BookingId, requestBody.RoomChatId, requestBody.Message); err != nil {
		log.Printf("‚ùå Failed to notify passenger %s: %v\n", passengerId, err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"message": "Failed to notify passenger",
			"error":   err.Error(),
		})
		return
	}

	// ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": fmt.Sprintf("Message sent to passenger %s with driverId %s, bookingId %s, and roomChatId %s", passengerId, requestBody.DriverId, requestBody.BookingId, requestBody.RoomChatId),
	})
}
