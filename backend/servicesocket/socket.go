package servicesocket

import (
	"fmt"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

// ================================
// üõ†Ô∏è **WebSocket Hub**
// ================================

// ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡πâ‡∏≠‡∏á WebSocket ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
var clients = make(map[string]map[*websocket.Conn]bool) // map[roomID] -> set of connections
var clientsMutex sync.Mutex

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î HTTP ‡πÄ‡∏õ‡πá‡∏ô WebSocket
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å Origin (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	},
}

// ================================
// üöÄ **WebSocket Functions**
// ================================

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
func AddClientConnection(room string, conn *websocket.Conn) {
	clientsMutex.Lock()
	defer clientsMutex.Unlock()

	if _, exists := clients[room]; !exists {
		clients[room] = make(map[*websocket.Conn]bool)
		fmt.Printf("‚úÖ Room created: %s\n", room)
	}
	clients[room][conn] = true
	fmt.Printf("‚úÖ Connection added to room %s\n", room)
}

// ‡πÄ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
func RemoveClientConnection(room string, conn *websocket.Conn) {
	clientsMutex.Lock()
	defer clientsMutex.Unlock()

	if _, exists := clients[room]; exists {
		delete(clients[room], conn)
		if len(clients[room]) == 0 {
			delete(clients, room)
			fmt.Printf("üóëÔ∏è Room removed: %s\n", room)
		}
	}
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
func BroadcastMessage(room string, message interface{}) {
	clientsMutex.Lock()
	defer clientsMutex.Unlock()

	if _, exists := clients[room]; exists {
		for conn := range clients[room] {
			err := conn.WriteJSON(message)
			if err != nil {
				log.Println("‚ùå Error broadcasting message:", err)
				conn.Close()
				delete(clients[room], conn)
			}
		}
	}
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î HTTP ‡πÄ‡∏õ‡πá‡∏ô WebSocket
func UpgradeConnection(w http.ResponseWriter, r *http.Request) (*websocket.Conn, error) {
	return upgrader.Upgrade(w, r, nil)
}

// ================================
// üí¨ **WebSocket Handler**
// ================================

// HandleRoom: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ï‡∏≤‡∏° roomID
func HandleRoom(roomID string, w http.ResponseWriter, r *http.Request) {
	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô WebSocket
	conn, err := UpgradeConnection(w, r)
	if err != nil {
		fmt.Println("‚ùå Error upgrading to WebSocket:", err)
		return
	}
	defer conn.Close()

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
	AddClientConnection(roomID, conn)

	// ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	for {
		var message map[string]interface{}
		err := conn.ReadJSON(&message)
		if err != nil {
			log.Println("‚ùå Error reading message:", err)
			RemoveClientConnection(roomID, conn)
			break
		}

		// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
		BroadcastMessage(roomID, message)
	}
}
